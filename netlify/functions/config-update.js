const WEBHOOK_URL = process.env.N8N_WEBHOOK_URL || 'https://n8n.salesgenius.co/webhook/listingsiteupdate';

function formatValue(val, indent = 2) {
  if (val === null) return 'null';
  if (val === undefined) return 'undefined';
  if (typeof val === 'string') return `"${val.replace(/"/g, '\\"')}` + '"';
  if (typeof val === 'number' || typeof val === 'boolean') return String(val);
  if (Array.isArray(val)) {
    if (val.length === 0) return '[]';
    const innerIndent = ' '.repeat(indent + 2);
    const items = val.map(item => `${innerIndent}${formatValue(item, indent + 2)}`).join(',\n');
    return `[\n${items}\n${' '.repeat(indent)}]`;
  }
  if (typeof val === 'object') {
    const keys = Object.keys(val);
    if (keys.length === 0) return '{}';
    const innerIndent = ' '.repeat(indent + 2);
    const items = keys.map(key => `${innerIndent}${key}: ${formatValue(val[key], indent + 2)}`).join(',\n');
    return `{\n${items}\n${' '.repeat(indent)}}`;
  }
  return String(val);
}

exports.handler = async (event) => {
  const baseHeaders = {
    'Content-Type': 'application/json',
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Methods': 'POST, OPTIONS',
    'Access-Control-Allow-Headers': 'Content-Type'
  };

  if (event.httpMethod === 'OPTIONS') {
    return { statusCode: 204, headers: baseHeaders };
  }

  if (event.httpMethod !== 'POST') {
    return { statusCode: 405, headers: baseHeaders, body: JSON.stringify({ message: 'Method Not Allowed' }) };
  }

  try {
    const { section, config } = JSON.parse(event.body || '{}');

    if (!section || !config) {
      return {
        statusCode: 400,
        headers: baseHeaders,
        body: JSON.stringify({ message: 'Missing required fields: section and config' })
      };
    }

    // Ensure we have a plain JSON-safe object for sending
    const configPlain = JSON.parse(JSON.stringify(config));

    // Optionally also include a JS-like file content for workflows that used it before
    let configFile = `/**\n* Site Configuration\n* Generated by Netlify Function\n* Last updated: ${new Date().toISOString()}\n*/\n\n`;
    for (const [key, value] of Object.entries(configPlain)) {
      configFile += `// ${key} configuration\n`;
      configFile += `export const ${key} = ${formatValue(value, 2)};\n\n`;
    }

    const payload = {
      timestamp: new Date().toISOString(),
      section,
      action: 'config_updated',
      source: 'openhaus_admin_netlify_fn',
      configJson: configPlain,
      configFile,
      property: config.property || null,
      contactInfo: config.contactInfo || null,
      openHouseDetails: config.openHouseDetails || null,
      packageItems: config.packageItems || null
    };

    const resp = await fetch(WEBHOOK_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'OpenHaus-Config-Sender/1.0'
      },
      body: JSON.stringify(payload)
    });

    const text = await resp.text();

    if (!resp.ok) {
      return {
        statusCode: 502,
        headers: baseHeaders,
        body: JSON.stringify({ message: 'Webhook error', status: resp.status, response: text })
      };
    }

    return {
      statusCode: 200,
      headers: baseHeaders,
      body: JSON.stringify({ message: `Successfully updated ${section} configuration` })
    };
  } catch (error) {
    return {
      statusCode: 500,
      headers: baseHeaders,
      body: JSON.stringify({ message: 'Failed to update configuration. Please try again later.' })
    };
  }
};


